{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","pages/HomePage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","pages/ChatPage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","isCentered","flexDir","alignItems","boxSize","src","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","notif","n","as","Button","removeItem","borderBottomWidth","t","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f08d345.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = () => {\n    const [show, setShow] = useState(false);\n    const handleClick = () => setShow(!show);\n    const toast = useToast();\n    const [email, setEmail] = useState();\n    const [password, setPassword] = useState();\n    const [loading, setLoading] = useState(false);\n\n    const history = useHistory();\n\n    const submitHandler = async () => {\n        setLoading(true);\n        if (!email || !password) {\n            toast({\n                title: \"Please Fill all the Feilds\",\n                status: \"warning\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            setLoading(false);\n            return;\n        }\n\n        // console.log(email, password);\n        try {\n            const config = {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                },\n            };\n\n            const { data } = await axios.post(\n                \"/api/user/login\",\n                { email, password },\n                config\n            );\n\n            // console.log(JSON.stringify(data));\n            toast({\n                title: \"Login Successful\",\n                status: \"success\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            localStorage.setItem(\"userInfo\", JSON.stringify(data));\n            setLoading(false);\n            history.push(\"/chats\");\n        } catch (error) {\n            toast({\n                title: \"Error Occured!\",\n                description: error.response.data.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            setLoading(false);\n        }\n    };\n\n    return (\n        <VStack spacing=\"10px\">\n            <FormControl id=\"email\" isRequired>\n                <FormLabel>Email Address</FormLabel>\n                <Input\n                    value={email}\n                    type=\"email\"\n                    placeholder=\"Enter Your Email Address\"\n                    onChange={(e) => setEmail(e.target.value)}\n                />\n            </FormControl>\n            <FormControl id=\"password\" isRequired>\n                <FormLabel>Password</FormLabel>\n                <InputGroup size=\"md\">\n                    <Input\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        type={show ? \"text\" : \"password\"}\n                        placeholder=\"Enter password\"\n                    />\n                    <InputRightElement width=\"4.5rem\">\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                            {show ? \"Hide\" : \"Show\"}\n                        </Button>\n                    </InputRightElement>\n                </InputGroup>\n            </FormControl>\n            <Button\n                colorScheme=\"blue\"\n                width=\"100%\"\n                style={{ marginTop: 15 }}\n                onClick={submitHandler}\n                isLoading={loading}\n            >\n                Login\n            </Button>\n            <Button\n                variant=\"solid\"\n                colorScheme=\"red\"\n                width=\"100%\"\n                onClick={() => {\n                    setEmail(\"guest@example.com\");\n                    setPassword(\"123456\");\n                }}\n            >\n                Get Guest User Credentials\n            </Button>\n        </VStack>\n    );\n};\n\nexport default Login;","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Signup = () => {\n    const [show, setShow] = useState(false);\n    const handleClick = () => setShow(!show);\n    const toast = useToast();\n    const history = useHistory();\n\n    const [name, setName] = useState();\n    const [email, setEmail] = useState();\n    const [confirmpassword, setConfirmpassword] = useState();\n    const [password, setPassword] = useState();\n    const [pic, setPic] = useState();\n    const [picLoading, setPicLoading] = useState(false);\n\n    const submitHandler = async () => {\n        setPicLoading(true);\n        if (!name || !email || !password || !confirmpassword) {\n            toast({\n                title: \"Please Fill all the Feilds\",\n                status: \"warning\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            setPicLoading(false);\n            return;\n        }\n        if (password !== confirmpassword) {\n            toast({\n                title: \"Passwords Do Not Match\",\n                status: \"warning\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            return;\n        }\n        console.log(name, email, password, pic);\n        try {\n            const config = {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                },\n            };\n            const { data } = await axios.post(\n                \"/api/user\",\n                {\n                    name,\n                    email,\n                    password,\n                    pic,\n                },\n                config\n            );\n            console.log(data);\n            toast({\n                title: \"Registration Successful\",\n                status: \"success\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            localStorage.setItem(\"userInfo\", JSON.stringify(data));\n            setPicLoading(false);\n            history.push(\"/chats\");\n        } catch (error) {\n            toast({\n                title: \"Error Occured!\",\n                description: error.response.data.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            setPicLoading(false);\n        }\n    };\n\n    const postDetails = (pics) => {\n        setPicLoading(true);\n        if (pics === undefined) {\n            toast({\n                title: \"Please Select an Image!\",\n                status: \"warning\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            return;\n        }\n        console.log(pics);\n        if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n            const data = new FormData();\n            data.append(\"file\", pics);\n            data.append(\"upload_preset\", \"starblaster\");\n            data.append(\"cloud_name\", \"dbg66nsfm\");\n            fetch(\"https://api.cloudinary.com/v1_1/dbg66nsfm/image/upload\", {\n                method: \"post\",\n                body: data,\n            })\n                .then((res) => res.json())\n                .then((data) => {\n                    setPic(data.url.toString());\n                    console.log(data.url.toString());\n                    setPicLoading(false);\n                })\n                .catch((err) => {\n                    console.log(err);\n                    setPicLoading(false);\n                });\n        } else {\n            toast({\n                title: \"Please Select an Image!\",\n                status: \"warning\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            setPicLoading(false);\n            return;\n        }\n    };\n\n    return (\n        <VStack spacing=\"5px\">\n            <FormControl id=\"first-name\" isRequired>\n                <FormLabel>Name</FormLabel>\n                <Input\n                    placeholder=\"Enter Your Name\"\n                    onChange={(e) => setName(e.target.value)}\n                />\n            </FormControl>\n            <FormControl id=\"email\" isRequired>\n                <FormLabel>Email Address</FormLabel>\n                <Input\n                    type=\"email\"\n                    placeholder=\"Enter Your Email Address\"\n                    onChange={(e) => setEmail(e.target.value)}\n                />\n            </FormControl>\n            <FormControl id=\"password\" isRequired>\n                <FormLabel>Password</FormLabel>\n                <InputGroup size=\"md\">\n                    <Input\n                        type={show ? \"text\" : \"password\"}\n                        placeholder=\"Enter Password\"\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <InputRightElement width=\"4.5rem\">\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                            {show ? \"Hide\" : \"Show\"}\n                        </Button>\n                    </InputRightElement>\n                </InputGroup>\n            </FormControl>\n            <FormControl id=\"password\" isRequired>\n                <FormLabel>Confirm Password</FormLabel>\n                <InputGroup size=\"md\">\n                    <Input\n                        type={show ? \"text\" : \"password\"}\n                        placeholder=\"Confirm password\"\n                        onChange={(e) => setConfirmpassword(e.target.value)}\n                    />\n                    <InputRightElement width=\"4.5rem\">\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                            {show ? \"Hide\" : \"Show\"}\n                        </Button>\n                    </InputRightElement>\n                </InputGroup>\n            </FormControl>\n            <FormControl id=\"pic\">\n                <FormLabel>Upload your Picture</FormLabel>\n                <Input\n                    type=\"file\"\n                    p={1.5}\n                    accept=\"image/*\"\n                    onChange={(e) => postDetails(e.target.files[0])}\n                />\n            </FormControl>\n            <Button\n                colorScheme=\"blue\"\n                width=\"100%\"\n                style={{ marginTop: 15 }}\n                onClick={submitHandler}\n                isLoading={picLoading}\n            >\n                Sign Up\n            </Button>\n        </VStack>\n    );\n};\n\nexport default Signup;","import {\n    Box,\n    Container,\n    Tab,\n    TabList,\n    TabPanel,\n    TabPanels,\n    Tabs,\n    Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n    const history = useHistory();\n\n    useEffect(() => {\n        const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n        if (user) history.push(\"/chats\");\n    }, [history]);\n\n    return (\n        <Container maxW=\"xl\" centerContent>\n            <Box\n                d=\"flex\"\n                justifyContent=\"center\"\n                p={3}\n                bg=\"white\"\n                w=\"100%\"\n                m=\"40px 0 15px 0\"\n                borderRadius=\"lg\"\n                borderWidth=\"1px\"\n            >\n                <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n                    Talk-A-Tive\n                </Text>\n            </Box>\n            <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n                <Tabs isFitted variant=\"soft-rounded\">\n                    <TabList mb=\"1em\">\n                        <Tab>Login</Tab>\n                        <Tab>Sign Up</Tab>\n                    </TabList>\n                    <TabPanels>\n                        <TabPanel>\n                            <Login />\n                        </TabPanel>\n                        <TabPanel>\n                            <Signup />\n                        </TabPanel>\n                    </TabPanels>\n                </Tabs>\n            </Box>\n        </Container>\n    );\n}\n\nexport default Homepage;","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n// const ENDPOINT = \"http://localhost:3001\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nconst ENDPOINT = \"https://orionstrike.herokuapp.com/\";\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n    const [messages, setMessages] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [newMessage, setNewMessage] = useState(\"\");\n    const [socketConnected, setSocketConnected] = useState(false);\n    const [typing, setTyping] = useState(false);\n    const [istyping, setIsTyping] = useState(false);\n    const toast = useToast();\n\n    const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        animationData: animationData,\n        rendererSettings: {\n            preserveAspectRatio: \"xMidYMid slice\",\n        },\n    };\n    const { selectedChat, setSelectedChat, user, notification, setNotification } =\n        ChatState();\n\n    const fetchMessages = async () => {\n        if (!selectedChat) return;\n\n        try {\n            const config = {\n                headers: {\n                    Authorization: `Bearer ${user.token}`,\n                },\n            };\n\n            setLoading(true);\n\n            const { data } = await axios.get(\n                `/api/message/${selectedChat._id}`,\n                config\n            );\n            setMessages(data);\n            setLoading(false);\n\n            socket.emit(\"join chat\", selectedChat._id);\n        } catch (error) {\n            toast({\n                title: \"Error Occured!\",\n                description: \"Failed to Load the Messages\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n        }\n    };\n\n    const sendMessage = async (event) => {\n        if (event.key === \"Enter\" && newMessage) {\n            socket.emit(\"stop typing\", selectedChat._id);\n            try {\n                const config = {\n                    headers: {\n                        \"Content-type\": \"application/json\",\n                        Authorization: `Bearer ${user.token}`,\n                    },\n                };\n                setNewMessage(\"\");\n                const { data } = await axios.post(\n                    \"/api/message\",\n                    {\n                        content: newMessage,\n                        chatId: selectedChat,\n                    },\n                    config\n                );\n                console.log(data);\n                socket.emit(\"new message\", data);\n                setMessages([...messages, data]);\n            } catch (error) {\n                toast({\n                    title: \"Error Occured!\",\n                    description: \"Failed to send the Message\",\n                    status: \"error\",\n                    duration: 5000,\n                    isClosable: true,\n                    position: \"bottom\",\n                });\n            }\n        }\n    };\n\n    useEffect(() => {\n        socket = io(ENDPOINT);\n        socket.emit(\"setup\", user);\n        socket.on(\"connected\", () => setSocketConnected(true));\n        socket.on(\"typing\", () => setIsTyping(true));\n        socket.on(\"stop typing\", () => setIsTyping(false));\n\n        // eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        fetchMessages();\n\n        selectedChatCompare = selectedChat;\n        // eslint-disable-next-line\n    }, [selectedChat]);\n\n    useEffect(() => {\n        socket.on(\"message recieved\", (newMessageRecieved) => {\n            if (\n                !selectedChatCompare || // if chat is not selected or doesn't match current chat\n                selectedChatCompare._id !== newMessageRecieved.chat._id\n            ) {\n                if (!notification.includes(newMessageRecieved)) {\n                    setNotification([newMessageRecieved, ...notification]);\n                    setFetchAgain(!fetchAgain);\n                }\n            } else {\n                setMessages([...messages, newMessageRecieved]);\n            }\n        });\n    });\n\n    const typingHandler = (e) => {\n        setNewMessage(e.target.value);\n\n        if (!socketConnected) return;\n\n        if (!typing) {\n            setTyping(true);\n            socket.emit(\"typing\", selectedChat._id);\n        }\n        let lastTypingTime = new Date().getTime();\n        var timerLength = 3000;\n        setTimeout(() => {\n            var timeNow = new Date().getTime();\n            var timeDiff = timeNow - lastTypingTime;\n            if (timeDiff >= timerLength && typing) {\n                socket.emit(\"stop typing\", selectedChat._id);\n                setTyping(false);\n            }\n        }, timerLength);\n    };\n\n    return (\n        <>\n            {selectedChat ? (\n                <>\n                    <Text\n                        fontSize={{ base: \"28px\", md: \"30px\" }}\n                        pb={3}\n                        px={2}\n                        w=\"100%\"\n                        fontFamily=\"Work sans\"\n                        d=\"flex\"\n                        justifyContent={{ base: \"space-between\" }}\n                        alignItems=\"center\"\n                    >\n                        <IconButton\n                            d={{ base: \"flex\", md: \"none\" }}\n                            icon={<ArrowBackIcon />}\n                            onClick={() => setSelectedChat(\"\")}\n                        />\n                        {messages &&\n                            (!selectedChat.isGroupChat ? (\n                                <>\n                                    {getSender(user, selectedChat.users)}\n                                    <ProfileModal\n                                        user={getSenderFull(user, selectedChat.users)}\n                                    />\n                                </>\n                            ) : (\n                                <>\n                                    {selectedChat.chatName.toUpperCase()}\n                                    <UpdateGroupChatModal\n                                        fetchMessages={fetchMessages}\n                                        fetchAgain={fetchAgain}\n                                        setFetchAgain={setFetchAgain}\n                                    />\n                                </>\n                            ))}\n                    </Text>\n                    <Box\n                        d=\"flex\"\n                        flexDir=\"column\"\n                        justifyContent=\"flex-end\"\n                        p={3}\n                        bg=\"#E8E8E8\"\n                        w=\"100%\"\n                        h=\"100%\"\n                        borderRadius=\"lg\"\n                        overflowY=\"hidden\"\n                    >\n                        {loading ? (\n                            <Spinner\n                                size=\"xl\"\n                                w={20}\n                                h={20}\n                                alignSelf=\"center\"\n                                margin=\"auto\"\n                            />\n                        ) : (\n                            <div className=\"messages\">\n                                <ScrollableChat messages={messages} />\n                            </div>\n                        )}\n\n                        <FormControl\n                            onKeyDown={sendMessage}\n                            id=\"first-name\"\n                            isRequired\n                            mt={3}\n                        >\n                            {istyping ? (\n                                <div>\n                                    <Lottie\n                                        options={defaultOptions}\n                                        // height={50}\n                                        width={70}\n                                        style={{ marginBottom: 15, marginLeft: 0 }}\n                                    />\n                                </div>\n                            ) : (\n                                <></>\n                            )}\n                            <Input\n                                variant=\"filled\"\n                                bg=\"#E0E0E0\"\n                                placeholder=\"Enter a message..\"\n                                value={newMessage}\n                                onChange={typingHandler}\n                            />\n                        </FormControl>\n                    </Box>\n                </>\n            ) : (\n                // to get socket.io on same page\n                <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n                    <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n                        Click on a user to start chatting\n                    </Text>\n                </Box>\n            )}\n        </>\n    );\n};\n\nexport default SingleChat;","export const isSameSenderMargin = (messages, m, i, userId) => {\n    // console.log(i === messages.length - 1);\n\n    if (\n        i < messages.length - 1 &&\n        messages[i + 1].sender._id === m.sender._id &&\n        messages[i].sender._id !== userId\n    )\n        return 33;\n    else if (\n        (i < messages.length - 1 &&\n            messages[i + 1].sender._id !== m.sender._id &&\n            messages[i].sender._id !== userId) ||\n        (i === messages.length - 1 && messages[i].sender._id !== userId)\n    )\n        return 0;\n    else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n    return (\n        i < messages.length - 1 &&\n        (messages[i + 1].sender._id !== m.sender._id ||\n            messages[i + 1].sender._id === undefined) &&\n        messages[i].sender._id !== userId\n    );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n    return (\n        i === messages.length - 1 &&\n        messages[messages.length - 1].sender._id !== userId &&\n        messages[messages.length - 1].sender._id\n    );\n};\n\nexport const isSameUser = (messages, m, i) => {\n    return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n    return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n    return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    Button,\n    useDisclosure,\n    IconButton,\n    Text,\n    Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n    console.log(user.pic);\n    const { isOpen, onOpen, onClose } = useDisclosure();\n\n    return (\n        <>\n            {children ? (\n                <span onClick={onOpen}>{children}</span>\n            ) : (\n                <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n            )}\n            <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n                <ModalOverlay />\n                <ModalContent h=\"410px\">\n                    <ModalHeader\n                        fontSize=\"40px\"\n                        fontFamily=\"Work sans\"\n                        d=\"flex\"\n                        justifyContent=\"center\"\n                    >\n                        {user.name}\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody\n                        d=\"flex\"\n                        flexDir=\"column\"\n                        alignItems=\"center\"\n                        justifyContent=\"space-between\"\n                    >\n                        <Image\n                            borderRadius=\"full\"\n                            boxSize=\"150px\"\n                            src={user.pic}\n                            alt={user.name}\n                        />\n                        <Text\n                            fontSize={{ base: \"28px\", md: \"30px\" }}\n                            fontFamily=\"Work sans\"\n                        >\n                            Email: {user.email}\n                        </Text>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={onClose}>Close</Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </>\n    );\n};\n\nexport default ProfileModal;","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n    const [selectedChat, setSelectedChat] = useState();\n    const [user, setUser] = useState();\n    const [notification, setNotification] = useState([]);\n    const [chats, setChats] = useState();\n\n    const history = useHistory();\n\n    useEffect(() => {\n        const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n        setUser(userInfo);\n\n        if (!userInfo) history.push(\"/\");\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [history]);\n\n    return (\n        <ChatContext.Provider\n            value={{\n                selectedChat,\n                setSelectedChat,\n                user,\n                setUser,\n                notification,\n                setNotification,\n                chats,\n                setChats,\n            }}\n        >\n            {children}\n        </ChatContext.Provider>\n    );\n};\n\nexport const ChatState = () => {\n    return useContext(ChatContext);\n};\n\nexport default ChatProvider;","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n    isLastMessage,\n    isSameSender,\n    isSameSenderMargin,\n    isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n    const { user } = ChatState();\n\n    return (\n        <ScrollableFeed>\n            {messages &&\n                messages.map((m, i) => (\n                    <div style={{ display: \"flex\" }} key={m._id}>\n                        {(isSameSender(messages, m, i, user._id) ||\n                            isLastMessage(messages, i, user._id)) && (\n                                <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                                    <Avatar\n                                        mt=\"7px\"\n                                        mr={1}\n                                        size=\"sm\"\n                                        cursor=\"pointer\"\n                                        name={m.sender.name}\n                                        src={m.sender.pic}\n                                    />\n                                </Tooltip>\n                            )}\n                        <span\n                            style={{\n                                backgroundColor: `${m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                                    }`,\n                                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                                borderRadius: \"20px\",\n                                padding: \"5px 15px\",\n                                maxWidth: \"75%\",\n                            }}\n                        >\n                            {m.content}\n                        </span>\n                    </div>\n                ))}\n        </ScrollableFeed>\n    );\n};\n\nexport default ScrollableChat;","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n    return (\n        <Badge\n            px={2}\n            py={1}\n            borderRadius=\"lg\"\n            m={1}\n            mb={2}\n            variant=\"solid\"\n            fontSize={12}\n            colorScheme=\"purple\"\n            cursor=\"pointer\"\n            onClick={handleFunction}\n        >\n            {user.name}\n            {admin === user._id && <span> (Admin)</span>}\n            <CloseIcon pl={1} />\n        </Badge>\n    );\n};\n\nexport default UserBadgeItem;","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n\nconst UserListItem = ({ user, handleFunction }) => {\n\n    return (\n        <Box\n            onClick={handleFunction}\n            cursor=\"pointer\"\n            bg=\"#E8E8E8\"\n            _hover={{\n                background: \"#38B2AC\",\n                color: \"white\",\n            }}\n            w=\"100%\"\n            d=\"flex\"\n            alignItems=\"center\"\n            color=\"black\"\n            px={3}\n            py={2}\n            mb={2}\n            borderRadius=\"lg\"\n        >\n            <Avatar\n                mr={2}\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n            />\n            <Box>\n                <Text>{user.name}</Text>\n                <Text fontSize=\"xs\">\n                    <b>Email : </b>\n                    {user.email}\n                </Text>\n            </Box>\n        </Box>\n    );\n};\n\nexport default UserListItem;","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    Button,\n    useDisclosure,\n    FormControl,\n    Input,\n    useToast,\n    Box,\n    IconButton,\n    Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const [groupChatName, setGroupChatName] = useState();\n    const [search, setSearch] = useState(\"\");\n    const [searchResult, setSearchResult] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [renameloading, setRenameLoading] = useState(false);\n    const toast = useToast();\n\n    const { selectedChat, setSelectedChat, user } = ChatState();\n\n    const handleSearch = async (query) => {\n        setSearch(query);\n        if (!query) {\n            return;\n        }\n\n        try {\n            setLoading(true);\n            const config = {\n                headers: {\n                    Authorization: `Bearer ${user.token}`,\n                },\n            };\n            const { data } = await axios.get(`/api/user?search=${search}`, config);\n            console.log(data);\n            setLoading(false);\n            setSearchResult(data);\n        } catch (error) {\n            toast({\n                title: \"Error Occured!\",\n                description: \"Failed to Load the Search Results\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom-left\",\n            });\n            setLoading(false);\n        }\n    };\n\n    const handleRename = async () => {\n        if (!groupChatName) return;\n\n        try {\n            setRenameLoading(true);\n            const config = {\n                headers: {\n                    Authorization: `Bearer ${user.token}`,\n                },\n            };\n            const { data } = await axios.put(\n                `/api/chat/rename`,\n                {\n                    chatId: selectedChat._id,\n                    chatName: groupChatName,\n                },\n                config\n            );\n\n            console.log(data._id);\n            // setSelectedChat(\"\");\n            setSelectedChat(data);\n            setFetchAgain(!fetchAgain);\n            setRenameLoading(false);\n        } catch (error) {\n            toast({\n                title: \"Error Occured!\",\n                description: error.response.data.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            setRenameLoading(false);\n        }\n        setGroupChatName(\"\");\n    };\n\n    const handleAddUser = async (user1) => {\n        if (selectedChat.users.find((u) => u._id === user1._id)) {\n            toast({\n                title: \"User Already in group!\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            return;\n        }\n\n        if (selectedChat.groupAdmin._id !== user._id) {\n            toast({\n                title: \"Only admins can add someone!\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            return;\n        }\n\n        try {\n            setLoading(true);\n            const config = {\n                headers: {\n                    Authorization: `Bearer ${user.token}`,\n                },\n            };\n            const { data } = await axios.put(\n                `/api/chat/groupadd`,\n                {\n                    chatId: selectedChat._id,\n                    userId: user1._id,\n                },\n                config\n            );\n\n            setSelectedChat(data);\n            setFetchAgain(!fetchAgain);\n            setLoading(false);\n        } catch (error) {\n            toast({\n                title: \"Error Occured!\",\n                description: error.response.data.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            setLoading(false);\n        }\n        setGroupChatName(\"\");\n    };\n\n    const handleRemove = async (user1) => {\n        if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n            toast({\n                title: \"Only admins can remove someone!\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            return;\n        }\n\n        try {\n            setLoading(true);\n            const config = {\n                headers: {\n                    Authorization: `Bearer ${user.token}`,\n                },\n            };\n            const { data } = await axios.put(\n                `/api/chat/groupremove`,\n                {\n                    chatId: selectedChat._id,\n                    userId: user1._id,\n                },\n                config\n            );\n\n            user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n            setFetchAgain(!fetchAgain);\n            fetchMessages();\n            setLoading(false);\n        } catch (error) {\n            toast({\n                title: \"Error Occured!\",\n                description: error.response.data.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n            setLoading(false);\n        }\n        setGroupChatName(\"\");\n    };\n\n    return (\n        <>\n            <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n            <Modal onClose={onClose} isOpen={isOpen} isCentered>\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader\n                        fontSize=\"35px\"\n                        fontFamily=\"Work sans\"\n                        d=\"flex\"\n                        justifyContent=\"center\"\n                    >\n                        {selectedChat.chatName}\n                    </ModalHeader>\n\n                    <ModalCloseButton />\n                    <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n                        <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n                            {selectedChat.users.map((u) => (\n                                <UserBadgeItem\n                                    key={u._id}\n                                    user={u}\n                                    admin={selectedChat.groupAdmin}\n                                    handleFunction={() => handleRemove(u)}\n                                />\n                            ))}\n                        </Box>\n                        <FormControl d=\"flex\">\n                            <Input\n                                placeholder=\"Chat Name\"\n                                mb={3}\n                                value={groupChatName}\n                                onChange={(e) => setGroupChatName(e.target.value)}\n                            />\n                            <Button\n                                variant=\"solid\"\n                                colorScheme=\"teal\"\n                                ml={1}\n                                isLoading={renameloading}\n                                onClick={handleRename}\n                            >\n                                Update\n                            </Button>\n                        </FormControl>\n                        <FormControl>\n                            <Input\n                                placeholder=\"Add User to group\"\n                                mb={1}\n                                onChange={(e) => handleSearch(e.target.value)}\n                            />\n                        </FormControl>\n\n                        {loading ? (\n                            <Spinner size=\"lg\" />\n                        ) : (\n                            searchResult?.map((user) => (\n                                <UserListItem\n                                    key={user._id}\n                                    user={user}\n                                    handleFunction={() => handleAddUser(user)}\n                                />\n                            ))\n                        )}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n                            Leave Group\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </>\n    );\n};\n\nexport default UpdateGroupChatModal;","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n    const { selectedChat } = ChatState();\n\n    return (\n        <Box\n            d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n            alignItems=\"center\"\n            flexDir=\"column\"\n            p={3}\n            bg=\"white\"\n            w={{ base: \"100%\", md: \"68%\" }}\n            borderRadius=\"lg\"\n            borderWidth=\"1px\"\n        >\n            <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        </Box>\n    );\n};\n\nexport default Chatbox;","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n    return (\n        <Stack>\n            <Skeleton height=\"45px\" />\n            <Skeleton height=\"45px\" />\n            <Skeleton height=\"45px\" />\n            <Skeleton height=\"45px\" />\n            <Skeleton height=\"45px\" />\n            <Skeleton height=\"45px\" />\n            <Skeleton height=\"45px\" />\n            <Skeleton height=\"45px\" />\n            <Skeleton height=\"45px\" />\n            <Skeleton height=\"45px\" />\n            <Skeleton height=\"45px\" />\n            <Skeleton height=\"45px\" />\n        </Stack>\n    );\n};\n\nexport default ChatLoading;","import {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    Button,\n    useDisclosure,\n    FormControl,\n    Input,\n    useToast,\n    Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\n\nconst GroupChatModal = ({ children }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const [groupChatName, setGroupChatName] = useState();\n    const [selectedUsers, setSelectedUsers] = useState([]);\n    const [search, setSearch] = useState(\"\");\n    const [searchResult, setSearchResult] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const toast = useToast();\n\n    const { user, chats, setChats } = ChatState();\n\n    const handleGroup = (userToAdd) => {\n        if (selectedUsers.includes(userToAdd)) {\n            toast({\n                title: \"User already added\",\n                status: \"warning\",\n                duration: 5000,\n                isClosable: true,\n                position: \"top\",\n            });\n            return;\n        }\n\n        setSelectedUsers([...selectedUsers, userToAdd]);\n    };\n\n    const handleSearch = async (query) => {\n        setSearch(query);\n        if (!query) {\n            return;\n        }\n\n        try {\n            setLoading(true);\n            const config = {\n                headers: {\n                    Authorization: `Bearer ${user.token}`,\n                },\n            };\n            const { data } = await axios.get(`/api/user?search=${search}`, config);\n            console.log(data);\n            setLoading(false);\n            setSearchResult(data);\n        } catch (error) {\n            toast({\n                title: \"Error Occured!\",\n                description: \"Failed to Load the Search Results\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom-left\",\n            });\n        }\n    };\n\n    const handleDelete = (delUser) => {\n        setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n    };\n\n    const handleSubmit = async () => {\n        if (!groupChatName || !selectedUsers) {\n            toast({\n                title: \"Please fill all the feilds\",\n                status: \"warning\",\n                duration: 5000,\n                isClosable: true,\n                position: \"top\",\n            });\n            return;\n        }\n\n        try {\n            const config = {\n                headers: {\n                    Authorization: `Bearer ${user.token}`,\n                },\n            };\n            const { data } = await axios.post(\n                `/api/chat/group`,\n                {\n                    name: groupChatName,\n                    users: JSON.stringify(selectedUsers.map((u) => u._id)),\n                },\n                config\n            );\n            setChats([data, ...chats]);\n            onClose();\n            toast({\n                title: \"New Group Chat Created!\",\n                status: \"success\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n        } catch (error) {\n            toast({\n                title: \"Failed to Create the Chat!\",\n                description: error.response.data,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            });\n        }\n    };\n\n    return (\n        <>\n            <span onClick={onOpen}>{children}</span>\n\n            <Modal onClose={onClose} isOpen={isOpen} isCentered>\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader\n                        fontSize=\"35px\"\n                        fontFamily=\"Work sans\"\n                        d=\"flex\"\n                        justifyContent=\"center\"\n                    >\n                        Create Group Chat\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n                        <FormControl>\n                            <Input\n                                placeholder=\"Chat Name\"\n                                mb={3}\n                                onChange={(e) => setGroupChatName(e.target.value)}\n                            />\n                        </FormControl>\n                        <FormControl>\n                            <Input\n                                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                                mb={1}\n                                onChange={(e) => handleSearch(e.target.value)}\n                            />\n                        </FormControl>\n                        <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n                            {selectedUsers.map((u) => (\n                                <UserBadgeItem\n                                    key={u._id}\n                                    user={u}\n                                    handleFunction={() => handleDelete(u)}\n                                />\n                            ))}\n                        </Box>\n                        {loading ? (\n                            // <ChatLoading />\n                            <div>Loading...</div>\n                        ) : (\n                            searchResult\n                                ?.slice(0, 4)\n                                .map((user) => (\n                                    <UserListItem\n                                        key={user._id}\n                                        user={user}\n                                        handleFunction={() => handleGroup(user)}\n                                    />\n                                ))\n                        )}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={handleSubmit} colorScheme=\"blue\">\n                            Create Chat\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </>\n    );\n};\n\nexport default GroupChatModal;","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n    const [loggedUser, setLoggedUser] = useState();\n\n    const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n    const toast = useToast();\n\n    const fetchChats = async () => {\n        // console.log(user._id);\n        try {\n            const config = {\n                headers: {\n                    Authorization: `Bearer ${user.token}`,\n                },\n            };\n\n            const { data } = await axios.get(\"/api/chat\", config);\n            setChats(data);\n        } catch (error) {\n            toast({\n                title: \"Error Occured!\",\n                description: \"Failed to Load the chats\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom-left\",\n            });\n        }\n    };\n\n    useEffect(() => {\n        setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n        fetchChats();\n        // eslint-disable-next-line\n    }, [fetchAgain]);\n\n    return (\n        <Box\n            d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n            flexDir=\"column\"\n            alignItems=\"center\"\n            p={3}\n            bg=\"white\"\n            w={{ base: \"100%\", md: \"31%\" }}\n            borderRadius=\"lg\"\n            borderWidth=\"1px\"\n        >\n            <Box\n                pb={3}\n                px={3}\n                fontSize={{ base: \"28px\", md: \"30px\" }}\n                fontFamily=\"Work sans\"\n                d=\"flex\"\n                w=\"100%\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n            >\n                My Chats\n                <GroupChatModal>\n                    <Button\n                        d=\"flex\"\n                        fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n                        rightIcon={<AddIcon />}\n                    >\n                        New Group Chat\n                    </Button>\n                </GroupChatModal>\n            </Box>\n            <Box\n                d=\"flex\"\n                flexDir=\"column\"\n                p={3}\n                bg=\"#F8F8F8\"\n                w=\"100%\"\n                h=\"100%\"\n                borderRadius=\"lg\"\n                overflowY=\"hidden\"\n            >\n                {chats ? (\n                    <Stack overflowY=\"scroll\">\n                        {chats.map((chat) => (\n                            <Box\n                                onClick={() => setSelectedChat(chat)}\n                                cursor=\"pointer\"\n                                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                                color={selectedChat === chat ? \"white\" : \"black\"}\n                                px={3}\n                                py={2}\n                                borderRadius=\"lg\"\n                                key={chat._id}\n                            >\n                                <Text>\n                                    {!chat.isGroupChat\n                                        ? getSender(loggedUser, chat.users)\n                                        : chat.chatName}\n                                </Text>\n                                {chat.latestMessage && (\n                                    <Text fontSize=\"xs\">\n                                        <b>{chat.latestMessage.sender.name} : </b>\n                                        {chat.latestMessage.content.length > 50\n                                            ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                                            : chat.latestMessage.content}\n                                    </Text>\n                                )}\n                            </Box>\n                        ))}\n                    </Stack>\n                ) : (\n                    <ChatLoading />\n                )}\n            </Box>\n        </Box>\n    );\n};\n\nexport default MyChats;","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n    Menu,\n    MenuButton,\n    MenuDivider,\n    MenuItem,\n    MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n    Drawer,\n    DrawerBody,\n    DrawerContent,\n    DrawerHeader,\n    DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics.js\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n    const [search, setSearch] = useState(\"\");\n    const [searchResult, setSearchResult] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [loadingChat, setLoadingChat] = useState(false);\n\n    const {\n        setSelectedChat,\n        user,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n    } = ChatState();\n\n    const toast = useToast();\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const history = useHistory();\n\n    const logoutHandler = () => {\n        localStorage.removeItem(\"userInfo\");\n        history.push(\"/\");\n    };\n\n    const handleSearch = async () => {\n        if (!search) {\n            toast({\n                title: \"Please Enter something in search\",\n                status: \"warning\",\n                duration: 5000,\n                isClosable: true,\n                position: \"top-left\",\n            });\n            return;\n        }\n\n        try {\n            setLoading(true);\n\n            const config = {\n                headers: {\n                    Authorization: `Bearer ${user.token}`,\n                },\n            };\n\n            const { data } = await axios.get(`/api/user?search=${search}`, config);\n            console.log(data);\n\n            setLoading(false);\n            setSearchResult(data);\n        } catch (error) {\n            toast({\n                title: \"Error Occured!\",\n                description: \"Failed to Load the Search Results\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom-left\",\n            });\n        }\n    };\n\n    const accessChat = async (userId) => {\n        console.log(userId);\n\n        try {\n            setLoadingChat(true);\n            const config = {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                    Authorization: `Bearer ${user.token}`,\n                },\n            };\n            const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n            if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n            setSelectedChat(data);\n            setLoadingChat(false);\n            onClose();\n        } catch (error) {\n            toast({\n                title: \"Error fetching the chat\",\n                description: error.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom-left\",\n            });\n        }\n    };\n\n    return (\n        <>\n            <Box\n                d=\"flex\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n                bg=\"white\"\n                w=\"100%\"\n                p=\"5px 10px 5px 10px\"\n                borderWidth=\"5px\"\n            >\n                <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n                    <Button variant=\"ghost\" onClick={onOpen}>\n                        <i className=\"fas fa-search\"></i>\n                        <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n                            Search User\n                        </Text>\n                    </Button>\n                </Tooltip>\n                <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n                    Talk-A-Tive\n                </Text>\n                <div>\n                    <Menu>\n                        <MenuButton p={1}>\n                            <NotificationBadge\n                                count={notification.length}\n                                effect={Effect.SCALE}\n                            />\n                            <BellIcon fontSize=\"2xl\" m={1} />\n                        </MenuButton>\n                        <MenuList pl={2}>\n                            {!notification.length && \"No New Messages\"}\n                            {notification.map((notif) => (\n                                <MenuItem\n                                    key={notif._id}\n                                    onClick={() => {\n                                        setSelectedChat(notif.chat);\n                                        setNotification(notification.filter((n) => n !== notif));\n                                    }}\n                                >\n                                    {notif.chat.isGroupChat\n                                        ? `New Message in ${notif.chat.chatName}`\n                                        : `New Message from ${getSender(user, notif.chat.users)}`}\n                                </MenuItem>\n                            ))}\n                        </MenuList>\n                    </Menu>\n                    <Menu>\n                        <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n                            <Avatar\n                                size=\"sm\"\n                                cursor=\"pointer\"\n                                name={user.name}\n                                src={user.pic}\n                            />\n                        </MenuButton>\n                        <MenuList>\n                            <ProfileModal user={user}>\n                                <MenuItem>My Profile</MenuItem>{\" \"}\n                            </ProfileModal>\n                            <MenuDivider />\n                            <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n                        </MenuList>\n                    </Menu>\n                </div>\n            </Box>\n\n            <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n                <DrawerOverlay />\n                <DrawerContent>\n                    <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n                    <DrawerBody>\n                        <Box d=\"flex\" pb={2}>\n                            <Input\n                                placeholder=\"Search by name or email\"\n                                mr={2}\n                                value={search}\n                                onChange={(e) => setSearch(e.target.value)}\n                            />\n                            <Button onClick={handleSearch}>Go</Button>\n                        </Box>\n                        {/* {searchResult?.map((t) => {\n                            console.log(t);\n                            return t;\n                        })} */}\n                        {loading ? (\n                            <ChatLoading />\n                        ) : (\n                            searchResult?.map((t) => (\n                                < UserListItem\n                                    key={t._id}\n                                    user={t}\n                                    handleFunction={() => accessChat(t._id)}\n                                />\n                                // <h3>{t.name}</h3>\n                            ))\n                        )}\n\n                        {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n                    </DrawerBody>\n                </DrawerContent>\n            </Drawer>\n        </>\n    );\n}\n\nexport default SideDrawer;","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n    const [fetchAgain, setFetchAgain] = useState(false);\n    const { user } = ChatState();\n\n    return (\n        <div style={{ width: \"100%\" }}>\n            {user && <SideDrawer />}\n            <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n                {user && <MyChats fetchAgain={fetchAgain} />}\n                {user && (\n                    <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n                )}\n            </Box>\n        </div>\n    );\n};\n\nexport default Chatpage;","import \"./App.css\";\nimport Homepage from \"./pages/HomePage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./pages/ChatPage\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}